/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sdp.prac2;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {@Test

    public void testTask4() {
        // Arrange
        List<Integer> a = Arrays.asList(1, 2, 3);
        List<Integer> b = Arrays.asList(4, 5, 6);

        List<Integer> c = Arrays.asList(1, 2, 3);
        List<Integer> d = Arrays.asList(4, 5);

        // Act
        List<Integer> result1 = SimpleFunctions.Task4(a, b);
        List<Integer> result2 = SimpleFunctions.Task4(a, b);

        // Assert
        List<Integer> expected = Arrays.asList(1 * 6, 2 * 5, 3 * 4); // [6, 10, 12]
        assertEquals(expected, result1);
        assertNull(result2);
    }
    @Test void task3MatchingParentheses() {
        // Arrange
        String input1 = "(())";
        String input2 = "(()())";
        String input3 = "(()))(";
        String input4 = "((())";

        // Act
        boolean result1 = SimpleFunctions.Task3(input1);
        boolean result2 = SimpleFunctions.Task3(input2);
        boolean result3 = SimpleFunctions.Task3(input3);
        boolean result4 = SimpleFunctions.Task3(input4);

        // Assert
        assertTrue(result1);
        assertTrue(result2);
        assertFalse(result3);
        assertFalse(result4); // unmatched closing parenthesis
    }

    // Test by Munashe (g23M8754)
    @Test void task6RoundsNumbers() {
        // Arrange
        List<Integer> input1 = Arrays.asList(100, 200, 300);
        List<Integer> input2 = Arrays.asList(150, 250, 350);
        List<Integer> input3 = Arrays.asList(123, 456, 789);

        List<Integer> expected1 = Arrays.asList(100, 200, 300);
        List<Integer> expected2 = Arrays.asList(200, 300, 400);
        List<Integer> expected3 = Arrays.asList(200, 500, 800);

        // Act
        List<Integer> result1 = SimpleFunctions.Task6(input1);
        List<Integer> result2 = SimpleFunctions.Task6(input2);
        List<Integer> result3 = SimpleFunctions.Task6(input3);

        // Assert
        assertIterableEquals(expected1, result1);
        assertIterableEquals(expected2, result2);
        assertIterableEquals(expected3, result3);
    }

}
